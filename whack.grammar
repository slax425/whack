character : /'.'/ ;

integral : /[-]?[0-9]+/ ;

floatingpt : /[-]?[0-9]+['.'][0-9]*['f']?/ ;

boolean : "true" | "false";

string : /\"(\\\\.|[^\"])*\"/ ;

ident   : /[a-zA-Z_][a-zA-Z0-9_]*/ ;

identlist : <ident> (',' <ident>)* ;

overloadid : (<scoperes> | <ident>) "::" <structopname> ;

scoperes : <ident> ("::" <ident>)+ ;

identifier : <overloadid> | <scoperes> | <ident> ;

alias : "using" <identlist> '=' <typelist> ';' ;

match   : "match" '(' <exprlist> ')' '{'
            (<exprlist> ':' <stmt>)+
            ("default" ':' <stmt>)?
          '}' ;

typeswitch : "match" "type" '(' <exprlist> ')' '{'
                (<typelist> ':' <stmt>)+
                ("default" ':' <stmt>)?
              '}' ;

callable : <closure> | <overloadid> | <scoperes> | <variable> ;

funccall : ("await" | "async")? <callable> ("->" <callable>)* ('(' <exprlist>? ')')+ ;

capture : '&' | '=' | (<ident> ('&' | ('=' <expression>))?) ;

closure : "func" ('[' (<capture> (',' <capture>)*)? ']')? '(' <args>? ')' <typelist>? <body> ;

initlist : '{' <exprlist>? '}' ;

listcomprehension : '{' <identlist> <forinexpr> (',' <forinexpr>)* '}' ;

memberinitlist : '{' <ident> ':' <expression> (',' <ident> ':' <expression>)* '}' ;

initializer : <memberinitlist> | <listcomprehension> | <initlist> ;

value : <type> <initializer> ;

newexpr : "new" ('(' <expression> ')')? <type> <initializer>? ;

fnsizeof : "sizeof" <expansion>? '(' <expression> ')' ;

fnalignof : "alignof" '(' <type> ')' ;

fnappend : "append" '(' <expression> ',' <exprlist> ')' ;

fnlen : "len" '(' <expression> ')' ;

fncast : "cast" '<' <type> '>' '(' <expression> ')' ;

expansion : "..." ;

expandop : <variable> <expansion> ;

deref : '*'+ <factor> ;

reference : <variable> '&' ;

factor : ('(' <expression> ')') | <closure> | <newexpr> | <fnsizeof> |
    <fnalignof> | <fnappend> | <fnlen> | <fncast> | <funccall> | <receive> |
    <expansion> | <expandop> | <preop> | <postop> | <value> | <initializer> | <character> |
    <floatingpt> | <integral> | <boolean> | <string> | <reference> | <element> |
    <structmember> | <identifier> | <deref> | <range> ;

term : <factor> (('*' | '/' | '%') <factor>)* ;

lexp : <term> (('+' | '-' | '&' | '^' | '|' | "<<" | ">>") <term>)* ;

ternary : <condition> '?' <expression> ':' <expression> ;

addrof : '&'(<element> | <structmember> | <identifier> | <deref>) ;

expression : <addrof> | <ternary> | <boolexpr> | <lexp> ;

exprlist : <expression> (',' <expression>)* ;

structmember : <ident> ('.' (<structopname> | <ident>))+ ;

element : (<structmember> | <ident>) ('[' <expression> ']')+ ;

rangeable : <funccall> | <integral> | <string> | <element> | <structmember> |
            <scoperes> | <ident> ;

range : <rangeable> (".." (<rangeable> "..")? ('='? <rangeable>)?)? ;

letexpr : "let" "mut"? <identlist> '=' <exprlist> ("where" <comparison>)? ';' ;

variable : <element> | <structmember> | <ident> ;

receive : "<-" <factor> ;

send : <factor> "<-" <exprlist> ;

select      : "select" '{'
                (<send> | (("let" <identlist> '=')? <receive>) ':' <stmt>)+
                ("default" ':' <stmt>)?
              '}' ;

preop : ("--" | "++") <variable> ;

postop : <variable> ("--" | "++") ;

assign : <variable> (',' <variable>)* '=' <exprlist> ';' ;

letbind : "let" (<scoperes> | <ident>) '(' <identlist> ')' '=' <ident> ;

ifstmt      : "if"  (
                      (
                        <letbind> <stmt> ("else" <stmt>)?
                      )
                    | (
                        <letexpr>* <condition> <stmt> ("else" <stmt>)?
                      )
                    ) ;

forinexpr : "for" <identlist> "in" <range> ("if" <condition>)? ;

forincrexpr : "for" (<letexpr> | ';') <comparison> ';' (<preop> | <postop> | <assign>)
                  (',' (<preop> | <postop> | <assign>))* ;

forexpr : <forinexpr> | <forincrexpr> ;

forstmt : <forexpr> <stmt> ;

whilestmt : "while" <condition> <stmt> ;

outstream : <variable> ("<<" <expression>)+ ;

instream : <variable> (">>" <expression>)+ ;

opeq : <variable> ('&' | '|' | '+' | '-' | '^' | '%' | '/' | '*' | ">>" | "<<") '=' <expression> ';' ;

declassign : <typeident> <initializer> ? (',' <ident> <initializer>?)* ';' ;

returnstmt : "return" <exprlist>? ';' ;

coreturnstmt : "co_return" <exprlist>? ';' ;

deletestmt : "delete" <exprlist> ';' ;

yieldstmt : "yield" <exprlist>? ';' ;

breakstmt : "break" ';' ;

continuestmt : "continue" ';' ;

unreachablestmt : "unreachable" ';' ;

deferstmt : "defer" <stmt> ;

stmt : <body> | <yieldstmt> | <returnstmt> | <coreturnstmt> | <deletestmt> | <unreachablestmt> |
       <breakstmt> | <continuestmt> | <deferstmt> | <ifstmt> | <whilestmt> |
       <forstmt> | <select> | <alias> | <structure> | <enumeration> | <match> |
       <typeswitch> | <declassign> | <letexpr> | <assign> | <opeq> | <comment> |
       (<funccall> | <send> | <receive> | <newexpr> | <outstream> | <instream> | <preop> |
        <postop>) ';' ;

boolexpr    : '!'? '(' <boolexpr> ')'
            | <comparison> (("&&" | "||" (<comparison> | <lexp>))*
            | <lexp> ("&&" | "||" <boolexpr>)+ ;

comparators : "<=" | ">=" | '<' | '>' | "!=" | "==" ;

comparison  : '!'? '(' <comparison> ')'
            | <lexp> (<comparators> <lexp>)+ ;

conditionals : <boolexpr>
             | <lexp> ;

condition   : '!'? '(' <condition> ')'
            | <conditionals> ("&&" | "||" <conditionals>)* ;

arraytype   : '[' <integral>? ']' <type> ;

fntype      : "func" '(' ((<typelist> ("->" <typelist>)?) | ("()" "->" <typelist>))? ')' ;

chantype    : "chan" '<' <typelist> '>' ;

atomictype  : "atomic" '<' <type> '>' ;

exprtype    : "type" '(' <expression> ')' ;

basictypes  : <fntype>
            | <exprtype>
            | <chantype>
            | <atomictype>
            | <arraytype>
            | <structdef>
            | <enumdef>
            | <classdef>
            | <identifier> ;

pointertype : <basictypes> '*'+ ;

type        : "mut"? (<pointertype> | <basictypes>) '&'? ;

typeident   : <type> <ident> ;

variadicarg : <variadictype> <ident> ;

args        : <variadicarg>
            | (<typeident> (',' <typeident>)* (',' <variadicarg>)?) | (',' <variadicarg>) ;

body        : <tags>? '{' <stmt>* '}' ;

variadictype : <type> <expansion> ;

typelist    : <variadictype>
            | <type> (',' <type>)* (',' <variadictype>)? ;

tag         : (<scoperes> | <ident>) ('(' <exprlist> ')')? ;

tags        : ('@' <tag>)
            | ('@' '(' <tag> (',' <tag>)* ')') ;

classdef    : "class" '{'
                 (<ident> '(' <typelist>? ')' ';')+
              '}' ;

enumdef     : "enum" (':' <ident>)? '{' <identlist> '}' ;

enumeration : "type" <ident> <enumdef> ;

dataclass   : "type" <ident> <classdef> ;

function    : "func" <ident> '(' <args>? ')' <typelist>? <body> ;

structdef   : "struct" '{'
                (<tags>? <declassign>)*
              '}' ;

structure   : "type" <ident> <structdef> ;

overloadableops : "<<" | ">>" | "<=>" | <comparators> | "-=" | "+="
                | '/' | '*' | "--" | '-' | "++" | '+' | "()" | "[]" ;

structopname : "operator" (<type> | <overloadableops>) ;

structop    : "func" '(' "mut"? <ident> ')'
                 <structopname> '(' (<args> | <typelist>)? ')' <type>?
                 (<body> | ('=' "default" ';')) ;

structfunc  : "func" '(' "mut"? <ident> ')'
                <ident> '(' <args>? ')' <typelist>?
                (<body> | ('=' "default" ';')) ;

interfacedef   : "interface" (':' (<scoperes> | <ident>) (',' (<scoperes> | <ident>))*)? '{'
                   (<fntype> (<structopname> | <ident>) ';')+
                 '}' ;

interface   : "type" <ident> <interfacedef> ;

externfunc  : "extern" "func" <ident> '(' <typelist>? ')' <typelist>? ';' ;

exports     : "export" <identlist> ';' ;

moduleuse   : "use" (<scoperes> | <ident>) ('!'? '{' <identlist> '}')? ("as" <ident>)? ';' ;

moduledecl  : "module" <ident> ;

compileropt : "{-" "OPTIONS" <identlist> "-}" ;

comment     : "//" /[^'\n']+/ | /[\n]/ ;

whack       : /^/ <comment>*
                  <compileropt>*
                  <comment>*
                  <moduledecl>
                  <comment>*
                  <moduleuse>*
                  <comment>*
                  <exports>*
                  (
                      <comment>
                    | <externfunc>
                    | <dataclass>
                    | <interface>
                    | <enumeration>
                    | <structure>
                    | <structfunc>
                    | <structop>
                    | <alias>
                    | <function>
                  )*
              /$/ ;
